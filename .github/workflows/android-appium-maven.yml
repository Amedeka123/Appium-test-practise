name: Android Appium Tests (Maven)

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  android-appium:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '11'

      - name: Cache Maven local repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Set up Node.js (for Appium)
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Appium (v2) CLI
        run: |
          npm ci || true
          npm i -g appium@2 || true
          npx --no-install appium -v || true

      - name: Start Android emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 30
          arch: x86_64
          target: default
          force-avd-creation: true
          emulator-options: -no-window -no-audio -no-boot-anim
          script: |
            echo "Emulator started"

      - name: Wait for device and set ANDROID_UDID
        id: device
        run: |
          boot_timeout=300
          interval=5
          elapsed=0
          while true; do
            adb_output="$(adb devices | sed -n '2p' || true)"
            if [ -n "$adb_output" ]; then
              serial="$(echo $adb_output | awk '{print $1}')"
              state="$(echo $adb_output | awk '{print $2}')"
              if [ "$state" = "device" ]; then
                echo "Device: $serial is online"
                echo "ANDROID_UDID=$serial" >> $GITHUB_ENV
                break
              fi
            fi
            sleep $interval
            elapsed=$((elapsed+interval))
            if [ $elapsed -gt $boot_timeout ]; then
              echo "Emulator did not come online within $boot_timeout seconds"
              adb devices
              exit 1
            fi
          done

      - name: Unlock screen (if locked)
        run: |
          adb -s "$ANDROID_UDID" shell input keyevent 26 || true
          adb -s "$ANDROID_UDID" shell input keyevent 82 || true

      - name: Try to locate APK and install (if present)
        run: |
          apk_path=$(ls app/build/outputs/apk/**/*.apk 2>/dev/null | head -n1 || true)
          if [ -z "$apk_path" ]; then
            apk_path=$(ls **/*.apk 2>/dev/null | head -n1 || true)
          fi
          if [ -n "$apk_path" ]; then
            echo "Found APK: $apk_path. Installing to emulator..."
            adb -s "$ANDROID_UDID" install -r "$apk_path"
          else
            echo "No APK found automatically. If your app isn't preinstalled, Appium tests may fail."
          fi

      - name: Start Appium server (background)
        run: |
          nohup npx appium --address 0.0.0.0 --port 4723 > appium.log 2>&1 &
          echo "Waiting for Appium to be ready..."
          for i in {1..60}; do
            if curl -sS http://127.0.0.1:4723/wd/hub/status >/dev/null 2>&1 || curl -sS http://127.0.0.1:4723/status >/dev/null 2>&1; then
              echo "Appium is up"
              break
            fi
            sleep 2
          done
          tail -n +1 appium.log | sed -n '1,200p'
        env:
          APPIUM_HOST: 127.0.0.1
          APPIUM_PORT: 4723

      - name: Show environment variables (debug)
        run: |
          echo "ANDROID_UDID=$ANDROID_UDID"
          echo "APPIUM_HOST=127.0.0.1"
          echo "APPIUM_PORT=4723"
          adb -s "$ANDROID_UDID" devices -l || true

      - name: Run Maven tests
        env:
          APPIUM_HOST: 127.0.0.1
          APPIUM_PORT: 4723
          ANDROID_UDID: ${{ env.ANDROID_UDID }}
        run: |
          set -e
          echo "Using Android UDID: $ANDROID_UDID"
          # Run Maven tests (adjust goals if you need a different lifecycle)
          mvn -B -V test -DskipTests=false

      - name: Upload Appium server log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: appium-log
          path: appium.log

      - name: Upload emulator log (logcat)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logcat
          path: |
            adb -s "$ANDROID_UDID" logcat -d > emulator_logcat.txt && echo "Saved" || echo "No logcat"
            emulator_logcat.txt

      - name: Upload test results (if any)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            target/surefire-reports/**/*.xml
            build/test-results/**/*.xml
            reports/Report.html
